#!/bin/bash

kubectl-install() {
    # https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl-binary-via-curl
    cd ~/bin
    curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/$(uname -s | awk '{print tolower($0)}')/amd64/kubectl
    chmod +x ./kubectl
}

k8s-masters() {
    kubectl get nodes -l kubernetes.io/role=master $*;
}
k8s-master-ips() {
    k8s-masters -o jsonpath='{.items[*].status.addresses[?(@.type=="ExternalIP")].address}';
}

k8s-master-labels() {
    k8s-masters -o jsonpath='{.items[*].metadata.labels}';
}

ns() {
    kubectl config set-context $(kubectl config current-context) --namespace=$1
}

first-running-pod() {
    if [[ -n "$1" ]]; then
        kubectl get pods | grep $1 | awk '/Running/ {print $1; exit;}'
    else
        kubectl get pods | awk '/Running/ {print $1; exit;}'
    fi
}

pod-names() {
    if [[ -n "$1" ]]; then
        kubectl get pods | awk "/$1/ {print \$1}"
    else
        kubectl get pods | awk '!/NAME/ {print $1}'
    fi
}

restart-pods() {
    pod-names $1 | xargs kubectl delete pod
}

k8s-exec() {
    if [[ -n "$2" ]]; then
        kubectl exec -it $(first-running-pod $1) $2
    else
        kubectl exec -it $(first-running-pod) $1
    fi
}

k8s-bash() {
    k8s-exec $1 $2 bash
}

k8s-r00t() {
    # https://mobile.twitter.com/mauilion/status/1129468485480751104
    kubectl run r00t --restart=Never -ti --rm --image lol --overrides '{"spec":{"hostPID": true, "containers":[{"name":"1","image":"alpine","command":["nsenter","--mount=/proc/1/ns/mnt","--","/bin/bash"],"stdin": true,"tty":true,"securityContext":{"privileged":true}}]}}'
}

k8s-logs() {
    if [[ -n "$2" ]]; then
        kubectl logs $(first-running-pod $1) $2
    else
        kubectl logs $(first-running-pod) $1
    fi
}

frankfurt() {
    export DEIS_PROFILE=frankfurt
    export AWS_DEFAULT_REGION=eu-central-1
    export KUBECONFIG=$HOME/.kube/frankfurt.kubeconfig
    if [[ -n "$1" ]]; then
        export KUBECONFIG=$HOME/.kube/frankfurt.vpn.kubeconfig
    fi
}

frankfurt-b() {
    export DEIS_PROFILE=frankfurt-b
    export AWS_DEFAULT_REGION=eu-central-1
    export KUBECONFIG=$HOME/.kube/frankfurt-b.kubeconfig
}

portland() {
    export DEIS_PROFILE=portland
    export AWS_DEFAULT_REGION=us-west-2
    export KUBECONFIG=$HOME/.kube/portland.kubeconfig
}

oregon-a() {
    export DEIS_PROFILE=oregon-b
    export AWS_DEFAULT_REGION=us-west-2
    export KUBECONFIG=$HOME/.kube/oregon-a.kubeconfig
}

oregon-b() {
    export DEIS_PROFILE=oregon-b
    export AWS_DEFAULT_REGION=us-west-2
    export KUBECONFIG=$HOME/.kube/oregon-b.kubeconfig
}

iowa-a() {
    export KUBECONFIG=$HOME/.kube/iowa-a.kubeconfig
}

iowa-b() {
    export KUBECONFIG=$HOME/.kube/iowa-b.kubeconfig
}

iowa-c() {
    export KUBECONFIG=$HOME/.kube/iowa-c.kubeconfig
}

docker-for-desktop() {
    export KUBECONFIG=$HOME/.kube/config
    kubectl config use-context docker-for-desktop
}
